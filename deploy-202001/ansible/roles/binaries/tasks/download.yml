---
- name: Check if dest exists
  stat:
    path: "{{ item.dest }}"
  register: result

# Steps for downloading archive, unpacking and copying file to dest
- name: Create tmp dir for archive
  tempfile:
    state: directory
    suffix: temp
  register: tempdir_1
  when: result.stat.exists == false and item.archive_src is defined

# # url is archive. Download, unpack, copy src to target location
# - name: Download into tmp dir
#   get_url:
#     url: "{{ item.url }}"
#     dest: "{{ tempdir_1.path }}/downloaded_file"
#     timeout: 300  # long timeout for ad-hoc compiled caddy
#   when: result.stat.exists == false and item.archive_src is defined



# - name: Unpack tmp download
#   unarchive:
#     src: "{{ tempdir_1.path }}/downloaded_file"
#     dest: "{{ tempdir_1.path }}"
#     timeout: 300  # long timeout for ad-hoc compiled caddy
#   when: result.stat.exists == false and item.archive_src is defined

- name: Download and unarchive into tmp dir
  unarchive:
    src: "{{ item.url }}"
    dest: "{{ tempdir_1.path }}"
    remote_src: yes
  when: result.stat.exists == false and item.archive_src is defined
  
- name: Copy archive_src to dest
  copy:
    src: "{{ tempdir_1.path }}/{{ item.archive_src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    remote_src: yes
  when: result.stat.exists == false and item.archive_src is defined


# url is binary, download directly to target location
- name: Download src directly to dest
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  when: result.stat.exists == false and item.archive_src is not defined



# - name: Unarchive a file that needs to be downloaded (added in 2.0)
#   unarchive:
#     src: https://example.com/example.zip
#     dest: /usr/local/bin
#     remote_src: yes

# - name: Download
#   get_url:
#     url: "{{ item.url }}"
#     dest: /etc/foo.conf
#     mode: '0440'

#   when: result.stat.exists == false



#     tempfile:
#     state: directory
#     suffix: build

# - name: create temporary directory
#   tempfile:
#     state: directory
#     suffix: temp
#   register: tempdir_1

# - name: use the registered var and the file module to remove the temporary file
#   file:
#     path: "{{ tempfile_1.path }}"
#     state: absent
#   when: tempfile_1.path is defined